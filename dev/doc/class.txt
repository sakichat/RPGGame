logic.Dice[QK, ZL, XQ, GB, SY]
+   roll(face:int) -> int sta
+   roll(face:int, modifier:int) -> int sta
+   roll(times:int, face:int, modifier:int) -> int sta

logic.Player:Cell
+   ABILITY_STR:String sta
+   ABILITY_DEX:String sta
+   ABILITY_CON:String sta
+   ABILITY_INT:String sta
+   ABILITY_WIS:String sta
+   ABILITY_CHA:String sta
+   ATTRIBUTE_ARMOR_CLASS:String sta
+   ATTRIBUTE_ATTACK_BONUS:String sta
+   ATTRIBUTE_DAMAGE_BONUS:String sta

-   abilityScores:[String:Integer]
+   getAbilityScore(name:String):Integer
+   getTotalAbilityScore(name:String):Integer
+   getAbilityModifier(name:String):Integer
+   genrateAbilities()

-   backpack:[logic.Equipment]
+   equipmentsInBackpack() -> [logic.Equipment]
+   isBackpackFull() -> boolean
+   pickUpEquipment(equipment:logic.Equipment)
+   dropEquipment(equipment:logic.Equipment)

-   equipments:[String:logic.Equipment]
+   getEquipment(type:String) -> logic.Equipment
+   equip(equipment:logic.Equipment)
+   unequip(equipment:logic.Equipment)
-   enhancedValueOnEquipments(attribute:String) -> int

-   level:int get set
-   name:String get set

+   Player(level:int, name:String)

-   hp:int get set
+   generateHp()

+   getArmorClass() -> int
+   getAttackBonus() -> int
+   getDamageBonus() -> int

logic.Equipment
+   HELMET:String sta
+   ARMOR:String sta
+   SHIELD:String sta
+   RING:String sta
+   BELT:String sta
+   BOOTS:String sta
+   WEAPON:String sta

-   name:String get set
-   type:String get set
-   enhancedAttribute:String get set
-   enhancedValue:get set

+   Equipment(name:String, type:String, enhancedAttribute:String, enhancedValue:int)
+   validate() -> boolean
    //  enhancedAttribute type

logic.Simulation
+   newPlayer() -> Player sta
+   equipments21() -> [logic.Equipment] sta


ui.view.AbilityView : JPanel
+   nameLabel:JLabel
+   scoreLabel:JLabel
+   modifierLabel: JLabel

ui.view.EquipmentView : JPanel
-   equipment:logic.Equipment get set
+   typeLabel:JLabel
+   nameLabel:JLabel
+   enhanceLabel:JLabel
-   dataToView()


EquipmentFileManager
+   path(name:String) -> File sta
    路径一定是 /data/equipments/xxxxxx.eqp.json

+   read(name:String) -> Equipment sta

+   save(equipment:Equipment) sta
    如果没有, 创建一个新文件..

+   allNames() -> [String] sta
    返回的是所有装备的名字, 不是文件名





logic.Point
-   x:int get set
-   y:int get set
+   add(delta:Point) -> g
+   directions() -> [Point] sta

logic.Cell : Observable
+   location:Point

logic.Obstacle : Cell

logic.Entrance : Cell

logic.Exit : Cell

logic.Chest : Cell
-   equipment:logic.Equipment get set

logic.Player : Cell
Refer


logic.GameMap
-   name:String get set
-   size:int get set
-   cells:[[Cell]]

+   addCell(cell:Cell, location:Point)
+   removeCell()
+   getCell(location:Point) -> Cell
+   hasCell(location:Point) -> boolean
+   moveCell(from:Point, to:Point)

+   getEntrances() -> [Entrance]
+   getExits() -> [Exit]


map.MapValidator
+   validate() -> boolean

map.validate.MapValidatorEntrance : MapValidator
map.validate.MapValidatorExit : MapValidator

map.validate.MapValidatorInterConnection : MapValidator


logic.MapConnection
-   id:int get set
-   map:GameMap get set
-   targetId:int get set


logic.Campaign
-   name:String get set
-   connections:[MapConnection]

+   addConnection(map:GameMap)
+   removeConnection(id:int)
+   getConnection(id:int) -> MapConnection

+   validate() -> boolean











-



ui.view.ImageView : View
-   name:String
*   paint()



ui.view.GameMapLayerView : View
-   size:int get set
-   cells:[[View]]

+   addCell(cell:View, location:Point)
+   removeCell(location:Point)
+   getCell(location:Point) -> View




ui.view.GameMapView : View
-   gameMap:GameMap get set

-   _LAYER_BACKGROUND:int = 0;

-   layers:[GameMapLayerView]
-   initLayers();
-   getLayer(index:int) -> GameMapLayerView
-   initBackground();











.
